name: GitHub Pages Overwriter
author: rayluo

# Description needs to be shorter than 125 bytes.
description: Overwrite your Github Pages branch with content of current workdir, thus deploy/publish without polluting your repo history.

inputs:
  source-directory:
    description: The name of the source directory that you wish it to become the wwwroot of your website
    required: true
  target-branch:
    description: The name of the branch that would be OVERWRITTEN by current workdir, you will then configure your Github Pages to serve this branch.
    required: false
    default: gh-pages
  repository:
    description: The GitHub repository (in the format 'owner/repo') if you want to push it to other repo
    required: false
    default: ${{ github.repository }}
  gh-token:
    description: The GitHub token used for authentication
    required: false
    default: ""
  ignore-empty:
    description: Whether to ignore empty commits
    required: false
    default: "false"
  user-name:
    description: The Git user.name configuration
    required: false
    default: "Github Pages Overwriter"
  user-email:
    description: The Git user.email configuration
    required: false
    default: "GithubPagesOverwriter@users.noreply.github.com"

runs:
  using: composite
  steps:

    - shell: bash
      run: |
        modify_origin() {
          # Check if the GitHub token is not set
          if [ -z "${{ inputs.gh-token }}" ]; then
            # Check if the input repository is equal to the GitHub repository
            if [ "${{ inputs.repository }}" == "${{ github.repository }}" ]; then
              return 0  # No changes needed, return from the function
            else
              echo "Error: GitHub token (gh-token) is required to push to other repo."
              exit 1  # Exit with an error
            fi
          fi
        
          git remote set-url origin https://x-access-token:${{ inputs.gh-token }}@github.com/${{ inputs.repository }}

        }
        
        configure_git() {
          # Configure Git user name and email
          git config user.name "${{ inputs.user-name }}"
          git config user.email "${{ inputs.user-email }}"
        }
        
        create_temp_directory() {
          # Save the original directory
          original_dir=$(pwd)
          echo "$original_dir" > /tmp/original_directory.txt
        
          # Create a temporary directory
          temp_dir=$(mktemp -d)
          cd "$temp_dir"
          echo "$temp_dir" > /tmp/temp_directory.txt
        }
        
        set_src_copy_path() {
          if [ "${{ inputs.source-directory }}" = "." ]; then
            src_copy_dir="$original_dir"
          else
            src_copy_dir="$original_dir/${{ inputs.source-directory }}"
          fi
        }

        rewrite_content() {
          # Remove all files and dirs from temp_dir except .git
          find "$temp_dir" -mindepth 1 ! -regex '^'"$temp_dir"'/.git\(/.*\)?' -exec rm -rf {} +

          # change directory to keep correct directory structure - otherwise find will give absolute paths
          cd "$src_copy_dir"

          # Copy files from original_dir to temp_dir except .git
          find . -mindepth 1 ! -path './.git*' -exec cp --parents -a '{}' "$temp_dir" \;
        
          # we must come back to temp directory for next steps (I don't like it)
          cd "$temp_dir"

        }
  
        cleanup_temp_directory() {
          # Move back to the original directory and remove the temporary directory
          original_dir=$(cat /tmp/original_directory.txt)
          temp_dir=$(cat /tmp/temp_directory.txt)
          cd "$original_dir"
          rm -rf "$temp_dir"
          rm /tmp/temp_directory.txt
        }
        
        
        copy_git_directory() {
          # Copy the .git directory to the temporary directory
          cp -r "$original_dir/.git" "$temp_dir/"
        }
        
        fetch_target_branch() {
          git fetch origin ${{ inputs.target-branch }}
          git checkout ${{ inputs.target-branch }}
        }
        
        commit_changes() {
          git add -A
          if [ "${{ inputs.ignore-empty }}" = "false" ]; then
            git commit --allow-empty -m "Automated publish"
          else
            git commit -m "Automated publish" || echo "No changes to commit"
          fi
        }
        
        push_changes() {
          git push origin HEAD:refs/heads/${{ inputs.target-branch }}
        }
      
        create_temp_directory
        set_src_copy_path
        copy_git_directory
        modify_origin
        configure_git
        fetch_target_branch
        rewrite_content
        commit_changes
        push_changes
        cleanup_temp_directory

branding:
  icon: copy
  color: green

